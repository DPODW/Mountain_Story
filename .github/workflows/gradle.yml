name: Java CI/CD with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    # JAVA 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - uses: actions/checkout@v3
    - run: touch ./src/main/resources/application.properties
    - run: echo "${{secrets.APPLICATION_PROPERTIES}}" > ./src/main/resources/application.properties
    - run: cat ./src/main/resources/application.properties
   

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
      with:
        arguments: clean bootJar
    
    - name: Build with Gradle Wrapper
      run: ./gradlew build
      
    
  # Docker 이미지 빌드
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/mountainstory .
    

    # DockerHub 로그인
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{secrets.DOCKERHUB_USERNAME}}
        password: ${{secrets.DOCKERHUB_PASSWORD}}

    #  Docker Hub 이미지 푸시
    - name: docker Hub push
      run: docker push ${{secrets.DOCKERHUB_USERNAME}}/mountainstory

     # 위 과정에서 푸시한 이미지를 ec2에서 풀받아서 실행시키는 과정 
  run-docker-image-on-ec2:
  #   # build-docker-image (위)과정이 완료되어야 실행됩니다.
    needs: build
    runs-on: self-hosted

    steps:
  #     # 1. 최신 이미지를 풀받습니다
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/mountainstory
      
  #     # 2. 기존의 컨테이너를 중지시킵니다
      - name: docker stop container
        run: sudo docker stop mountainstory 2>/dev/null || true

  #     # 3. 최신 이미지를 컨테이너화하여 실행시킵니다
      - name: docker run new container
        run: sudo docker run --name mountainstory --rm -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/mountainstory

  #     # 4. 미사용 이미지를 정리합니다
      - name: delete old docker image
        run: sudo docker system prune -f
